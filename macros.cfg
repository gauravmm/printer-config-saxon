#####################################################################
#  Sensorless Homing
#####################################################################

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F6000

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F6000

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


#####################################################################
#  Start/End
#####################################################################

[gcode_macro COND_G28]
description: Home all axes only if any axis is not homed.
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    BED_MESH_CLEAR
    G28
    {% endif %}

[gcode_macro COND_QGL]
description: Perform QGL only if not performed since last homing.
gcode:
    {% if not printer.quad_gantry_level.applied %}
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    {% endif %}

[gcode_macro COND_BED_MESH]
description: Perform bed mesh only if not already saved.
gcode:
    {% if printer['bed_mesh'].profile_name == "current_print" %}
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=current_print
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    COND_G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600

[gcode_macro PRINT_START]
gcode:
    M117 Initial Homing
    COND_G28
    G0 Z30 F10000
    G0 X150 Y280

    M117 Heating Bed
    SET_FAN_SPEED FAN=bed_fans SPEED=0.3
    M190 S{params.BED | int}                ; set bed temp and wait for it reach temp

    ; Heat the extruder while performing QGL
    M104 S{params.EXTRUDER | int}           ; Non-blocking heat extruder
    M117 Performing QGL
    COND_QGL

    M117 Heating Extruder
    ; If the fan is to be stopped later, prevent that from happening:
    UPDATE_DELAYED_GCODE ID=STOP_FAN_LATER DURATION=0
    SET_FAN_SPEED FAN=filter_fan SPEED=0.7

    G0 Z30 F3000
    G0 X150 Y280 F3000
    M109 S{params.EXTRUDER | int}           ; Block until extruder is up to temperature

    M117 Purging Nozzle
    PURGE_BUCKET                    ; Clean the nozzle and re-home the Z axis immediately

    M117 Calibrating
    G28 Z ; Reset the lowest position

    M117 Z-Calibration..
    CALIBRATE_Z ; Run the Z-calibration plugin
    ; Adjust according to the Z_ADJUST parameter
    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1

    M117 Printing


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z30.00 X20.0 Y20.0 F1000   ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    M117 Done!

    SET_FAN_SPEED FAN=filter_fan SPEED=1.
    UPDATE_DELAYED_GCODE ID=STOP_FAN_LATER DURATION=180

[delayed_gcode STOP_FAN_LATER]
gcode:
    SET_FAN_SPEED FAN=filter_fan SPEED=0.


#####################################################################
#     Purge Bucket
#####################################################################

[gcode_macro PURGE_BUCKET]
gcode:
    SAVE_GCODE_STATE NAME=PURGE
    DOCK_PROBE

    G90                    ; absolute
    G0 X273 Y302 F10000    ; go to purge bucket
    G0 Z2
    G1 X293 E5 F4000       ; purge some filament into bucket
    G1 X273 E5 F4000
    G1 X293 E5 F4000
    G1 X273 E5 F4000
    G0 X273 F10000
    G0 Z1
    G1 E-5 F1000            ; Retract a little
    G0 X233 F4000           ; move across purge brush
    G0 Z10 F1000            ; Raise and return
    RESTORE_GCODE_STATE NAME=PURGE


#####################################################################
#     Test
#####################################################################

# From https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/TEST_SPEED.cfg
[gcode_macro TEST_SPEED]
gcode:
    # Home, get position, throw around toolhead, home again.
    # If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
    # We only measure to a full step to accomodate for endstop variance.
    # Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    # Home and get position for comparison later:
    # G28
    # # QGL if not already QGLd (only if QGL section exists in config)
    # {% if printer.configfile.settings.quad_gantry_level %}
    #     {% if printer.quad_gantry_level.applied == False %}
    #         QUAD_GANTRY_LEVEL
    #         G28 Z
    #     {% endif %}
    # {% endif %}
    # G90
    # G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    # G4 P1000
    # GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

        # Small pattern
            # Small diagonals
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}

            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} {% if printer.configfile.settings.printer.max_accel_to_decel %}ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}{% endif %}

    # Re-home and get position again for comparison:
    # G28
    # # Go to XY home positions (in case your homing override leaves it elsewhere)
    # G90
    # G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    # G4 P1000
    # GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
